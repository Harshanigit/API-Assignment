openapi: 3.1.0
info:
  title: Karelia API Programming - OpenAPI 3.1.0 Demonstration
  description: |-
    This is a sample OpenAPI OAD.
    
    Some useful links:
    - [Learn OpenAPI](https://learn.openapis.org)
    - [OpenAPI Specification](https://learn.openapis.org/)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.1.1

# 2) Apply the security globally to all operations
security:
  - bearerAuth: []

servers:
  - url: http://localhost:3000
  
tags:
  - name: Sample dataset
    description: Everything you need to know about APIs
    externalDocs:
      description: Find out more
      url: https://m.karelia.fi

paths:
  /data:
    get:
      tags:
        - Data Management
      summary: Retrieve all data records
      description: Returns a list of all data records.
      responses:
        '200':
          description: A list of data records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Data'
    
    post:
      tags:
        - Data Management
      summary: Create a new data record
      description: Adds a new record to the dataset.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Data'
      responses:
        '201':
          description: Record created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Data'
        '409':
          description: Record already exists
        '415':
          description: Unsupported Media Type

  /data/{id}:
    get:
      tags:
        - Data Management
      summary: Get data by ID
      description: Retrieves a single data record by its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Data record found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Data'
        '404':
          description: Data record not found

    delete:
      tags:
        - Data Management
      summary: Delete a data record by ID
      description: Deletes a record with the specified ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Record deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Record deleted successfully"
        '404':
          description: Data record not found

    put:
      tags:
        - Data Management
      summary: Update a data record by ID
      description: Updates a record with the specified ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Data'
      responses:
        '200':
          description: Record updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Data'
        '201':
          description: New record created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Data'
        '404':
          description: Data record not found
        '415':
          description: Unsupported Media Type

components:
  schemas:
    Data:
      type: object
      properties:
        id:
          type: string
          example: "1"
        Firstname:
          type: string
          example: "Jyri"
        Surname:
          type: string
          example: "Kemppainen"
      required:
        - id
        - Firstname
        - Surname